#!/usr/bin/python3

import bs4, requests, argparse
from pathlib import Path
from getpass import getpass
from re import findall, DOTALL
import json
import pprint
import random
from math import floor
from tqdm import tqdm


#HELPER FUNCTIONS FOR PUZZLES:

def valid_passport(**kwgs):
    if 'byr' in kwgs:
        year = kwgs['byr']
        if year.isdigit() and 1920<=int(year)<=2002:
            pass
        else:
            print(f'{kwgs} failed at byr')
            return False
    if 'iyr' in kwgs:
        year = kwgs['iyr']
        if year.isdigit() and 2010<=int(year)<=2020:
            pass
        else:
            print(f'{kwgs} failed at iyr')
            return False
    if 'eyr' in kwgs:
        year = kwgs['eyr']
        if year.isdigit() and 2020<=int(year)<=2030:
            pass
        else:
            print(f'{kwgs} failed at eyr')
            return False
    if 'hgt' in kwgs:
        height = kwgs['hgt']
        if not (height.endswith('cm') or height.endswith('in')): return False
        val, unit = height[:-2], height[-2:]
        if unit == 'cm':
            if 150<=int(val)<=193:
                pass
            else:
                print(f'{kwgs} failed at hgt')
                return False
        elif unit == 'in':
            if 59<=int(val)<=76:
                pass
            else:
                print(f'{kwgs} failed at hgt')
                return False
    if 'hcl' in kwgs:
        hair = kwgs['hcl']
        if len(hair) == 7 and hair[0] == '#' and all([c in '0123456789abcdef' for c in hair[1:]]):
            pass
        else:
            print(f'{kwgs} failed at hcl {kwgs["hcl"]}')
            return False
    if 'ecl' in kwgs:
        eye = kwgs['ecl']
        if eye in ('amb','blu','brn','gry','grn','hzl','oth'):
            pass
        else:
            print(f'{kwgs} failed at ecl')
            return False
    if 'pid' in kwgs:
        pid = kwgs['pid']
        if len(pid) == 9 and pid.isdigit():
            pass
        else:
            print(f'{kwgs} failed at pid')
            return False
    print(f'passed===={kwgs}')
    return True

#FUNCTIONS TO ANSWER THE PUZZLES HERE:

def day_1(file: str):
    nums = [int(i) for i in file.split()]
    for i in range(len(nums)):
        for j in range(len(nums)):
            if nums[i]+nums[j]==2020 and j!=i:
                return nums[i]*nums[j]


def day_1_final(file: str):
    nums = [int(i) for i in file.split()]
    for num in nums:
        for num2 in nums:
            for num3 in nums:
                if num+num2+num3 == 2020 and num!=num2 and num2!=num3 and num3!=num:
                    return num*num2*num3

def day_2(file: str):
    return sum([int(low)<=password.count(needs)<=int(high) for low,high,needs,password in findall('(\d+)\-(\d+) (\w+): (\w+)',file)])

def day_2_final(file: str):
    return sum( [(password[int(low)-1]==needs).__xor__(password[int(high)-1]==needs) for low,high,needs,password in findall('(\d+)\-(\d+) (\w+): (\w+)',file)])

def day_3(file: str):
    terrain = [line for line in file.split()]
    tree_count = 0
    x = 0
    y = 0
    length_of_map = len(terrain[0])
    while y < len(terrain)-1:
        x += 3
        y += 1
        if terrain[y][x%length_of_map] == '#':
            tree_count += 1
            print(terrain[y])
    return tree_count

def day_3_final(file: str):
    terrain = [line for line in file.split()]
    length_of_map = len(terrain[0])
    ans = 1
    for y_diff, x_diff in [(1,3),(1,1),(1,5),(1,7),(2,1)]:
        tree_count = 0
        x = 0
        y = 0
        while y < len(terrain)-1:
            x += x_diff
            y += y_diff
            if terrain[y][x%length_of_map] == '#':
                tree_count += 1
                print(terrain[y])
        ans = ans*tree_count
    return ans

def day_4(file: str):
    return sum([all([key in passport for key in 'byr,iyr,eyr,hgt,hcl,ecl,pid'.split(',')]) for passport in file.split('\n\n')])

def day_4_final(file: str):
    count = 0
    for passport in file.split('\n\n'):
        if not all([key in passport and valid_passport() for key in 'byr,iyr,eyr,hgt,hcl,ecl,pid'.split(',')]):
            continue
        dic = {val.strip().split(':')[0]:val.strip().split(':')[1] for val in passport.split()}
        print(dic,'---------------------')
        if valid_passport(**dic):
            count += 1
    return count

def day_5(file: str):
    max_id = 0
    for line in file.split():
        row, col = line[:7], line[7:]
        print(f'line:{line}row:{row}\ncol:{col}')
        row = ''.join(['0' if c=='F' else '1' for c in row])
        col = ''.join(['0' if c=='L' else '1' for c in col])
        id = int(row,2)*8 + int(col,2)
        if max_id < id: max_id = id
    return max_id

def day_5_final(file: str):
    print(file)
    seats = list()
    for line in file.split():
        row, col = line[:7], line[7:]
        print(f'line:{line}row:{row}\ncol:{col}')
        row = ''.join(['0' if c=='F' else '1' for c in row])
        col = ''.join(['0' if c=='L' else '1' for c in col])
        id = int(row,2)*8 + int(col,2)
        seats.append(id)
    seats.sort()
    for i, seat in enumerate(seats[1:-1]):
        if abs(seats[i-1]-seats[i]) != 1 or abs(seats[i]-seats[i+1]) != 1:
            print(seats[i-1:i+2])
    print("day 5 final not impletmented yet")

def day_6(file: str):
    return sum([len(set(group.replace('\n',''))) for group in file.split('\n\n')])

def day_6_final(file: str):
    return sum(sum([all([answer in g for g in group.split('\n')]) for answer in group.split('\n')[0]]) for group in file.split('\n\n'))

def day_7(file: str):
     print("day_7(file: str): not implemented")

def day_7_final(file: str):
    print("day 7 final not implemented yet")

def day_8(file: str):
     print("day_8(file: str): not implemented")

def day_8_final(file: str):
    print('day 8 final not implemented yet')

def day_9(file: str):
     print("day_9(file: str): not implemented")

def day_9_final(file: str):
    print('day 9 final is not implemented yet')

def day_10(file: str):
     print("day_10(file: str): not implemented")

def day_10_final(file: str):
    print("day 10 final not implemented yet")

def day_11(file: str):
     print("day_11(file: str): not implemented")

def day_11_final(file: str):
    print("day 11 not implemented yet")

def day_12(file: str):
     print("day_12(file: str): not implemented")

def day_12_final(file: str):
    print('day 12 final is not implemented yet')

def day_13(file: str):
     print("day_13(file: str): not implemented")

def day_13_final(file: str):
    pass

def day_14(file: str):
    print('day 14 not implemented yet')

def day_14_final(file: str):
    print('day 14 final is not implemented yet')

def day_15(file: str):
    print('day 15 not implemented yet')

def day_15_final(file: str):
    print('day 15 final is not implemented yet')

def day_16(file: str):
    print('day 16 not implemented yet')

def day_16_final(file: str):
    print('day 16 final is not implemented yet')

def day_17(file: str):
    print('day 17 not implemented yet')

def day_17_final(file: str):
    print('day 17 final is not implemented yet')

def day_18(file: str):
    print('day 18 not implemented yet')

def day_18_final(file: str):
    print('day 18 final is not implemented yet')

def day_19(file: str):
    print('day 19 not implemented yet')

def day_19_final(file: str):
    print('day 19 final is not implemented yet')

def day_20(file: str):
    print('day 20 not implemented yet')

def day_20_final(file: str):
    print('day 20 final is not implemented yet')

def day_21(file: str):
    print('day 21 not implemented yet')

def day_21_final(file: str):
    print('day 21 final is not implemented yet')

def day_22(file: str):
    print('day 22 not implemented yet')

def day_22_final(file: str):
    print('day 22 final is not implemented yet')

def day_23(file: str):
    print('day 23 not implemented yet')

def day_23_final(file: str):
    print('day 23 final is not implemented yet')

def day_24(file: str):
    print('day 24 not implemented yet')

def day_24_final(file: str):
    print('day 24 final is not implemented yet')

def day_25(file: str):
    print('day 25 not implemented yet')

def day_25_final(file: str):
    print('day 25 final is not implemented yet')

# REGISTER ALL METHODS IN A DICTIONARY
day_func = {
    '1':day_1, '1_final':day_1_final,
    '2':day_2, '2_final':day_2_final,
    '3':day_3, '3_final':day_3_final,
    '4':day_4, '4_final':day_4_final,
    '5':day_5, '5_final':day_5_final,
    '6':day_6, '6_final':day_6_final,
    '7':day_7, '7_final':day_7_final,
    '8':day_8, '8_final':day_8_final,
    '9':day_9, '9_final':day_9_final,
    '10':day_10, '10_final':day_10_final,
    '11':day_11, '11_final':day_11_final,
    '12':day_12, '12_final':day_12_final,
    '13':day_13, '13_final':day_13_final,
    '14':day_14, '14_final':day_14_final,
    '15':day_15, '15_final':day_15_final,
    '16':day_16, '16_final':day_16_final,
    '17':day_17, '17_final':day_17_final,
    '18':day_18, '18_final':day_18_final,
    '19':day_19, '19_final':day_19_final,
    '20':day_20, '20_final':day_20_final,
    '21':day_21, '21_final':day_21_final,
    '22':day_22, '22_final':day_22_final,
    '23':day_23, '23_final':day_23_final,
    '24':day_24, '24_final':day_24_final,
    '25':day_25, '25_final':day_25_final,
}

def main(day_num, username=None, password=None, online = False, submit = False, part_one = False, part_two = False):
    if online:
        headers = {
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'
        }

        login_data = {
            'commit': 'Sign in',
            'utf8': '%E2%9C%93',
            'login': username if online and  username else '',
            'password': password if online and  password else ''
        }
        url = "https://github.com/session"
        s = requests.Session()
        r = s.get(url, headers=headers)
        soup = bs4.BeautifulSoup(r.content, 'html5lib')
        login_data['authenticity_token'] = soup.find('input', attrs={'name': 'authenticity_token'})['value']
        r = s.post(url, data=login_data, headers=headers)

        git = 'https://adventofcode.com/auth/github'
        day = 'https://adventofcode.com/2020/day/{}/input'
        submit_answer_url = 'https://adventofcode.com/2020/day/{}/answer'
        s.get(git)

    puzzle_input = s.get(day.format(day_num)).content.decode().strip('\n') if online else Path(f'day{day_num}.txt').read_text().strip('\n')
    if part_one:
        print(f'day {day_num} part 1:')
        ans = day_func[day_num](puzzle_input)
        print(ans)
        if submit:
            data = {'level':'1','answer':str(ans)}
            resp=s.post(submit_answer_url.format(day_num),data=data)
            results = b'<span class="day-success"' in resp.content
            print('success' if results else 'failed')
    if part_two:
        print(f'day {day_num} part 2:')
        ans = day_func[f'{day_num}_final'](puzzle_input)
        print(ans)
        if submit:
            data = {'level':'2','answer':str(ans)}
            resp=s.post(submit_answer_url.format(day_num),data=data)
            results = b'<span class="day-success' in resp.content
            print('success' if results else 'failed')
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(__file__)
    parser.add_argument('day', nargs='+', help='sets the day to be ran')
    parser.add_argument('-o','--online', action='store_true', help='this flag causes the script to pull the input from the website. Otherwise, it will use dayX.txt as input.')
    parser.add_argument('-s','--submit',action='store_true',help='this flag will submit the answer generated to advent of code.')
    parser.add_argument('-1','--part_one',action='store_true', help='run the first part of the puzzle')
    parser.add_argument('-2','--part_two',action='store_true', help='run the second part of the puzzle')
    parser.add_argument('-u','--username', help='Github username')
    parser.add_argument('-p','--password', help='github password')
    args = parser.parse_args()
    part_one = True if args.part_one==args.part_two else args.part_one
    part_two = args.part_two
    if args.online:
        username = args.username or input('enter username: ')
        password = args.password or getpass()
    else:
        password = None
        username = None
    for day in args.day:
        main(day, online=args.online, submit=args.submit, username=username, password=password, part_one=part_one, part_two=part_two)
